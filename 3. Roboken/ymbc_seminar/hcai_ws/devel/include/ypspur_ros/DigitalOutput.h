// Generated by gencpp from file ypspur_ros/DigitalOutput.msg
// DO NOT EDIT!


#ifndef YPSPUR_ROS_MESSAGE_DIGITALOUTPUT_H
#define YPSPUR_ROS_MESSAGE_DIGITALOUTPUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ypspur_ros
{
template <class ContainerAllocator>
struct DigitalOutput_
{
  typedef DigitalOutput_<ContainerAllocator> Type;

  DigitalOutput_()
    : output(0)
    , toggle_time()  {
    }
  DigitalOutput_(const ContainerAllocator& _alloc)
    : output(0)
    , toggle_time()  {
  (void)_alloc;
    }



   typedef uint8_t _output_type;
  _output_type output;

   typedef ros::Duration _toggle_time_type;
  _toggle_time_type toggle_time;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HIGH_IMPEDANCE)
  #undef HIGH_IMPEDANCE
#endif
#if defined(_WIN32) && defined(LOW)
  #undef LOW
#endif
#if defined(_WIN32) && defined(HIGH)
  #undef HIGH
#endif
#if defined(_WIN32) && defined(PULL_UP)
  #undef PULL_UP
#endif
#if defined(_WIN32) && defined(PULL_DOWN)
  #undef PULL_DOWN
#endif

  enum {
    HIGH_IMPEDANCE = 0u,
    LOW = 1u,
    HIGH = 2u,
    PULL_UP = 3u,
    PULL_DOWN = 4u,
  };


  typedef boost::shared_ptr< ::ypspur_ros::DigitalOutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ypspur_ros::DigitalOutput_<ContainerAllocator> const> ConstPtr;

}; // struct DigitalOutput_

typedef ::ypspur_ros::DigitalOutput_<std::allocator<void> > DigitalOutput;

typedef boost::shared_ptr< ::ypspur_ros::DigitalOutput > DigitalOutputPtr;
typedef boost::shared_ptr< ::ypspur_ros::DigitalOutput const> DigitalOutputConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ypspur_ros::DigitalOutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ypspur_ros::DigitalOutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ypspur_ros::DigitalOutput_<ContainerAllocator1> & lhs, const ::ypspur_ros::DigitalOutput_<ContainerAllocator2> & rhs)
{
  return lhs.output == rhs.output &&
    lhs.toggle_time == rhs.toggle_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ypspur_ros::DigitalOutput_<ContainerAllocator1> & lhs, const ::ypspur_ros::DigitalOutput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ypspur_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ypspur_ros::DigitalOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ypspur_ros::DigitalOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ypspur_ros::DigitalOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ypspur_ros::DigitalOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ypspur_ros::DigitalOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ypspur_ros::DigitalOutput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ypspur_ros::DigitalOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "019a9291acebccdd82910cc6e11634c7";
  }

  static const char* value(const ::ypspur_ros::DigitalOutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x019a9291acebccddULL;
  static const uint64_t static_value2 = 0x82910cc6e11634c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::ypspur_ros::DigitalOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ypspur_ros/DigitalOutput";
  }

  static const char* value(const ::ypspur_ros::DigitalOutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ypspur_ros::DigitalOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 output\n"
"duration toggle_time\n"
"\n"
"uint8 HIGH_IMPEDANCE=0\n"
"uint8 LOW=1\n"
"uint8 HIGH=2\n"
"uint8 PULL_UP=3\n"
"uint8 PULL_DOWN=4\n"
;
  }

  static const char* value(const ::ypspur_ros::DigitalOutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ypspur_ros::DigitalOutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output);
      stream.next(m.toggle_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DigitalOutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ypspur_ros::DigitalOutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ypspur_ros::DigitalOutput_<ContainerAllocator>& v)
  {
    s << indent << "output: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.output);
    s << indent << "toggle_time: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.toggle_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YPSPUR_ROS_MESSAGE_DIGITALOUTPUT_H
